// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
            pc[15];          // address of next instruction

        PARTS: // Put your code here:
    /*
    Instruction bits:
        instruction[15] == Op-code bit (determines A or C instruction)
        instruction[14] == Unused bit during C instructions
        instruction[13] == Unused bit during C instructions
        instruction[12] == A bit (determines if M register is used during ALU operation)
        instruction[11] == ALU zx bit (c1)
        instruction[10] == ALU nx bit (c2)
        instruction[9] == ALU zy bit (c3)
        instruction[8] == ALU ny bit (c4)
        instruction[7] == ALU f bit (c5)
        instruction[6] == ALU no bit (c6)
        instruction[5] == A register bit (d1)
        instruction[4] == D register bit (d2)
        instruction[3] == M register bit (d3)
        instruction[2] == LT bit (j1)
        instruction[1] == EQ bit (j2)
        instruction[0] == GT bit (j3)
    */

    //Mux16 before A Register
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);

    //A Register
    Not(in=instruction[15], out=isA);
    Or(a=isA, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    
    //Mux16 before ALU
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);

    //D Register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);

    //writeM
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    //ALU
    ALU(x=outD, 
        y=outAM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8], 
        f=instruction[7],
        no=instruction[6], 
        out=outALU, 
        out=outM,
        zr=zero,
        ng=neg);

    //jump bits
    Or(a=zero, b=neg, out=notPos);
    Not(in=notPos, out=pos);

    And(a=instruction[0], b=pos, out=jgt);
    And(a=instruction[1], b=zero, out=jeq);
    And(a=instruction[2], b=neg, out=jlt);

    Or(a=jgt, b=jeq, out=jl2);
    Or(a=jl2, b=jlt, out=jl3);
    And(a=jl3, b=instruction[15], out=jump);


    //Program Counter    
    PC(in=outA, load=jump, reset=reset, inc=true, out[0..14]=pc);
}
